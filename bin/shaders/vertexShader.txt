#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
//Tutti i valori di in, sono presi dal VAO, da java tramite glEnableVertexAttribArray

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 trasformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float useFakeLighting;

const float density = 0.0035;
const float gradient = 5.0;


void main(void){
	
	vec4 worldPosition = trasformationMatrix * vec4(position,1.0); //bodyFrame to globalFrame, sono le coordinate reali del vertice
	
	
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	//moltiplicare per la view matrix, in pratica sommare il vettore -posizione della camera, con l vettore posizione del vertice
	
	 //worlPosition sarebbe la posizione del vertex * la trasformation matrix
	 //quindi ha le coordinate rispetto al mondo globale, cioe' dove il modello si trova ora
	 
	gl_Position = projectionMatrix * positionRelativeToCam;     //moltiplicare per queste due matrici, regola il fatto se dobbiamo o meno vedere quel vertice
																//in base alla camera e alla projection matrix
																// la view matrix, This matrix will transform vertices from world-space to view-space.  
																//This matrix is the inverse of the camera’s transformation matrix described above.
	pass_textureCoords = textureCoords;
	
	vec3 actualNormal = normal;
	
	if(useFakeLighting > 0.5){ //Se per questo modelTexture, ad esempio grass, ferb dobbiamo usare un fake lighting
							   //significa che il vettore normal di questo vertex dobbiamo considerarlo verso l'alto
							   //perche' l'erba deve avere un'illuminazione omogenea
							   //useFakeLighting è un bool
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (trasformationMatrix * vec4(actualNormal,0.0)).xyz;
				//il vettore normal del vertex, lo traslo rispetto alla trasformationMatrix
				//cosi' da ottenere le sue coordinate reali, vec4(normal,0.0) perche' e' una direzione
	toLightVector = lightPosition - worldPosition.xyz;
	
	//Non abbiamo la posizione della camera ma abbiamo, la viewMatrix dove e' contenuta la posizione negata
	//della camera
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
					//con inverse ricava la traslation matrix della camera, dalla view matrix
					//che sarebbe la trasformationmatrix della camera
					
					
	float distance = length(positionRelativeToCam.xyz);//la lunghezza di questo vettore equivale a quella del vettore camera-->vertice
			
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	//calcola la visibilita di questo vertex e la passa al fragmenShader
	
	
}