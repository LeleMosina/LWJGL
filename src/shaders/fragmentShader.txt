#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSample;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

void main(){
	vec3 unitNormal = normalize(surfaceNormal);//normalizzo il normal vector del vertice, che e' gia traslato 
							//rispetto alla trasformationMatrix nel vertex shader
							
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
					//Utilizzo il dot per capire quanto sono concordi questi due vettori
					//il dot tra due vettori e' compreso tra 0 ed 1 quando l'angolo tra i due vettori e' tra 0 e 90
					//i due vettori sono il vettore normal, quindi perpendicolare al vertice
					//ed il vettore normalizzato dal vertice alla sorgente luce
	float brightness = max(nDotl, 0.0);
	vec3 diffuse = brightness * lightColour;


		
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
					//è l'opposto del vettore tra noi e la luce
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
				//fa la riflessione del vettore tra la luce e noi, sul vettore normal
	
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * lightColour;
	
	out_Color = vec4(diffuse,1.0) * texture(textureSample, pass_textureCoords) + vec4(finalSpecular, 1.0);

}