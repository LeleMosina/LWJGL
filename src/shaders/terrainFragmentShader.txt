#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;

uniform vec3 skyColour;

void main(){


	vec4 blendMapColour = texture(blendMap, pass_textureCoords);
				//texture è come getRGB, da' il colore rgba di quel textureCoords
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture, tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture, tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture, tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;


	vec3 unitNormal = normalize(surfaceNormal);//normalizzo il normal vector del vertice, che e' gia traslato 
							//rispetto alla trasformationMatrix nel vertex shader
							
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
					//Utilizzo il dot per capire quanto sono concordi questi due vettori
					//il dot tra due vettori e' compreso tra 0 ed 1 quando l'angolo tra i due vettori e' tra 0 e 90
					//i due vettori sono il vettore normal, quindi perpendicolare al vertice
					//ed il vettore normalizzato dal vertice alla sorgente luce
	float brightness = max(nDotl, 0.2);
	vec3 diffuse = brightness * lightColour;


		
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
					//è l'opposto del vettore tra noi e la luce
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
				//fa la riflessione del vettore tra la luce e noi, sul vettore normal
	
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
							//dot tra il vettore della luce riflessa, e dal vertice alla camera
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * lightColour * reflectivity;
	
	out_Color = vec4(diffuse,1.0) * totalColour + vec4(finalSpecular, 1.0);
	
	out_Color = mix(vec4(skyColour,1.0), out_Color, visibility);
	

}